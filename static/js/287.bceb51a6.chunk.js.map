{"version":3,"file":"static/js/287.bceb51a6.chunk.js","mappings":"wRACA,EAA+B,mCAA/B,EAAkF,oCAAlF,EAA6H,2BAA7H,EAAqK,iC,SC6ErK,EAvEyB,WAAO,IAAD,IACrBA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,UAAS,MAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACMC,GAAWC,EAAAA,EAAAA,MAiBjB,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,2FACxBJ,GAAW,GADa,kBAGEK,EAAAA,EAAAA,aAAiBX,GAHnB,OAGhBY,EAHgB,OAItBR,EAAaQ,GAJS,gDAMtBC,QAAQC,IAAR,MANsB,yBAQtBR,GAAW,GARW,4EAAH,qDAWzBI,MACG,CAACV,KAGF,iCACE,SAAC,KAAD,CAAMe,GAAE,iBAAER,QAAF,IAAEA,GAAF,UAAEA,EAAUS,aAAZ,aAAE,EAAiBC,YAAnB,QAA2B,IAAnC,UACE,oBAAQC,KAAK,SACbC,UAAWC,EADX,WAEE,SAAC,MAAD,IAFF,gBAKDf,IAAW,SAACgB,EAAA,EAAD,IACXlB,IACC,iBAAKgB,UAAWC,EAAhB,WACE,gBACEE,MAAM,QACNC,IAAK,kCAAoCpB,EAAUqB,YACnDC,IAAKtB,EAAUuB,kBAEjB,iBAAKP,UAAWC,EAAhB,WACE,0BACGjB,EAAUwB,MADb,KACsBxB,EAAUyB,aAAaC,MAAM,EAAG,GADtD,QAGA,wCAAyC,GAAzB1B,EAAU2B,aAA1B,QACA,sCACA,uBAAI3B,EAAU4B,YACd,oCACA,eAAIZ,UAAWC,EAAf,SACGjB,EAAU6B,OAAOC,KAAI,SAAAC,GAAK,OACzB,wBAAoBA,EAAMC,MAAjBD,EAAME,gBAMzB,mBACA,4BACE,oDACA,2BACE,yBACE,SAAC,KAAD,CAAMrB,GAAG,OAAT,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,2BAGJ,mBACA,SAAC,KAAD,Y,yECtEFsB,EAAU,mCACVC,EAAQ,gCAERC,EAAgB,mCAAG,+FACjBC,EADiB,UACHF,EADG,sCACmCD,GADnC,SAEAI,IAAAA,IAAUD,GAFV,uBAEfE,EAFe,EAEfA,KAFe,kBAGhBA,GAHgB,2CAAH,qDAMhBC,EAAY,mCAAG,WAAM3C,GAAN,uFACIyC,IAAAA,IAAA,UAClBH,EADkB,iBACDtC,EADC,oBACkBqC,IAFtB,cACbG,EADa,yBAIZA,EAASE,MAJG,2CAAH,sDAOZE,EAAY,mCAAG,WAAM5C,GAAN,uFACIyC,IAAAA,IAAA,UAClBH,EADkB,iBACDtC,EADC,4BAC0BqC,IAF9B,cACbG,EADa,yBAIZA,EAASE,KAAKG,MAJF,2CAAH,sDAOZC,EAAc,mCAAG,WAAM9C,GAAN,uFACEyC,IAAAA,IAAA,UAClBH,EADkB,iBACDtC,EADC,4BAC0BqC,IAF5B,cACfG,EADe,yBAIdA,EAASE,KAAKK,SAJA,2CAAH,sDAOdC,EAAe,mCAAG,WAAMC,GAAN,uFACCR,IAAAA,IAAA,UAClBH,EADkB,gCACcD,EADd,kBAC+BY,EAD/B,+CADD,cAChBT,EADgB,yBAIfA,EAASE,KAAKK,SAJC,2CAAH,sDAOfpC,EAAM,CACV4B,iBAAAA,EACAI,aAAAA,EACAK,gBAAAA,EACAJ,aAAAA,EACAE,eAAAA,GAGF","sources":["webpack://react-homework-template/./src/pages/MovieDetailsPage/MovieDetails.module.css?a206","pages/MovieDetailsPage/MovieDetails.jsx","service/MovieApi.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"movieDetalis\":\"MovieDetails_movieDetalis__pNHA2\",\"infoContainer\":\"MovieDetails_infoContainer__g+Qt+\",\"list\":\"MovieDetails_list__vuWhU\",\"buttonBack\":\"MovieDetails_buttonBack__2ydpV\"};","import { useEffect, useState } from 'react';\nimport { useParams, Link, Outlet, useLocation } from 'react-router-dom';\nimport api from 'service/MovieApi';\nimport Loader from 'components/Loader/Loader';\nimport { FcUpLeft } from \"react-icons/fc\"\nimport s from \"./MovieDetails.module.css\";\n\nconst MovieDetailsPage = () => {\n  const { movieId } = useParams();\n  const [movieInfo, setMovieInfo] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const location = useLocation();\n\n  useEffect(() => {\n    const FetchDetalisMovie = async () => {\n      setLoading(true);\n      try {\n        const dataMovie = await api.getMovieById(movieId);\n        setMovieInfo(dataMovie);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n  FetchDetalisMovie();\n  }, [movieId]);\n\n  return (\n    <>\n      <Link to={location?.state?.from ?? '/'}>\n        <button type=\"button\"\n        className={s.buttonBack}>\n          <FcUpLeft /> Go back\n        </button>\n      </Link>\n      {loading && <Loader />}\n      {movieInfo && (\n        <div className={s.movieDetalis}>\n          <img\n            width=\"300px\"\n            src={'https://image.tmdb.org/t/p/w500' + movieInfo.poster_path}\n            alt={movieInfo.original_title}\n          />\n          <div className={s.infoContainer}>\n            <h1>\n              {movieInfo.title} ({movieInfo.release_date.slice(0, 4)})\n            </h1>\n            <p>User score: {movieInfo.vote_average * 10}%</p>\n            <h2>Overview</h2>\n            <p>{movieInfo.overview}</p>\n            <h2>Genres</h2>\n            <ul className={s.list}>\n              {movieInfo.genres.map(genre => (\n                <li key={genre.id}>{genre.name}</li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      )}\n      <hr />\n      <div>\n        <h3>Additional information</h3>\n        <ul>\n          <li>\n            <Link to=\"cast\">Cast</Link>\n          </li>\n          <li>\n            <Link to=\"reviews\">Reviews</Link>\n          </li>\n        </ul>\n        <hr />\n        <Outlet />\n      </div>\n    </>\n  );\n};\n\nexport default MovieDetailsPage;","import axios from 'axios';\n\nconst API_KEY = 'ff8c1bd9b42b07cf6632c931dd788828';\nconst BASE_URL = `https://api.themoviedb.org/3/`;\n\nconst getTrendingMovie = async () => {\n  const response = `${BASE_URL}trending/movie/day?api_key=${API_KEY}`;\n  const { data } = await axios.get(response);\n  return data;\n};\n\nconst getMovieById = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nconst getMovieCast = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return response.data.cast;\n};\n\nconst getMovieReview = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n\nconst getMovieByQuery = async query => {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  );\n  return response.data.results;\n};\n\nconst api = {\n  getTrendingMovie,\n  getMovieById,\n  getMovieByQuery,\n  getMovieCast,\n  getMovieReview,\n};\n\nexport default api;\n"],"names":["movieId","useParams","useState","movieInfo","setMovieInfo","loading","setLoading","location","useLocation","useEffect","FetchDetalisMovie","api","dataMovie","console","log","to","state","from","type","className","s","Loader","width","src","poster_path","alt","original_title","title","release_date","slice","vote_average","overview","genres","map","genre","name","id","API_KEY","BASE_URL","getTrendingMovie","response","axios","data","getMovieById","getMovieCast","cast","getMovieReview","results","getMovieByQuery","query"],"sourceRoot":""}